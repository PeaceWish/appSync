你是一个Electron和Vue.js的专家，专注于创建现代、高效、用户体验友好的桌面应用程序。

# CursorRules: 跨平台桌面工具与Web后台管理端开发指南

## 1. 设计原则
### 1.1 用户为中心
- **直观性**: 界面设计应简洁明了，用户无需学习即可上手。
- **一致性**: 保持界面风格和交互逻辑的一致性，减少用户认知负担。
- **响应性**: 确保应用在各种设备和屏幕尺寸上都能良好运行。

### 1.2 模块化与可扩展性
- **组件化开发**: 将功能拆分为独立的组件，便于维护和扩展。
- **松耦合**: 模块之间应尽量减少依赖，确保修改一个模块不会影响其他模块。

### 1.3 安全性
- **数据加密**: 用户敏感数据（如密码、文件）必须加密存储和传输。
- **权限控制**: 确保用户只能访问其权限范围内的资源。

### 1.4 渐进性
- **项目追踪**： 创建一个单独的文件（project-timeline.md）来跟踪项目进度，尤其当使用cursor agent时做的变更，请在文件中记录。
- **可执行**： 每次根据项目进度，创建最小MVC结构，并确保可以执行。

---

## 2. 技术约定
### 2.1 代码风格
- **前端代码**: 使用ESLint + Prettier规范代码风格，遵循Vue 3官方最佳实践。
  - 组件命名：`PascalCase`（如`AppStore.vue`）。
  - 变量命名：`camelCase`。
  - 常量命名：`UPPER_CASE`。
- **后端代码**: 使用JavaScript/Node.js时，遵循Airbnb JavaScript风格指南。
  - 异步操作：优先使用`async/await`，避免回调地狱。
  - 错误处理：使用`try/catch`捕获异常，避免程序崩溃。

### 2.2 版本控制
- **Git工作流**: 采用Git Flow工作流，确保开发、测试和发布流程清晰。
  - `main`分支：稳定版本，仅用于发布。
  - `develop`分支：开发分支，集成最新功能。
  - 功能分支：从`develop`分支创建，命名格式为`feature/功能名称`（如`feature/user-auth`）。
- **提交信息**: 提交信息应清晰描述改动内容，格式为`类型: 描述`（如`feat: 添加用户登录功能`）。

### 2.3 接口规范
- **RESTful API**: 遵循RESTful设计原则，使用HTTP方法（GET、POST、PUT、DELETE）表示操作。
  - 资源命名：使用复数形式（如`/users`、`/applications`）。
  - 状态码：正确使用HTTP状态码（如200表示成功，404表示资源未找到）。
- **WebSocket**: 用于实时同步功能，确保消息格式统一（如JSON格式）。

---

## 3. 性能优化
### 3.1 桌面工具优化
- **Electron性能**:
  - 启用硬件加速：在`BrowserWindow`中设置`webPreferences.webgl`为`true`。
  - 多进程架构：使用Electron的主进程和渲染进程分离，避免阻塞UI线程。
  - 懒加载：按需加载应用资源，减少初始加载时间。
  - 通过减少渲染进程数量、使用 Web Workers 来处理后台任务、按需加载资源来优化性能。同时，可以考虑将一些计算任务移到后端服务器来分担前端的压力，避免过多的负载集中在桌面工具本身。
- **文件同步**:
  - 增量同步：使用增量同步和文件哈希值来优化文件同步，确保每次同步只传输更改的部分。使用 Delta Sync 或 rsync 等技术，只同步变更的内容。并且利用本地缓存和延迟同步（在空闲时同步）来降低网络负担
  - 本地缓存：使用IndexedDB或LocalStorage缓存常用数据，减少重复请求。
  - 可以使用跨平台的库，如 chokidar，它可以自动选择最适合的文件系统监控方法，确保 Windows 和 Linux 上的文件变化都能快速响应。

### 3.2 Web后台优化
- **数据库优化**:
  - 索引：为常用查询字段添加索引，提升查询性能。
  - 分页：对大量数据查询使用分页，避免一次性加载过多数据。
- **API性能**:
  - 缓存：使用Redis缓存频繁请求的数据（如应用列表）。
  - 压缩：启用Gzip压缩，减少API响应体积。

---

## 4. 开发顺序
### 4.1 第一阶段：核心功能开发
1. **桌面工具**:
   - 实现应用安装、启动、卸载功能。
   - 构建全屏界面，禁用窗口操作。
   - 开发“应用商城”和“已安装”页签，展示应用列表。
2. **Web后台管理端**:
   - 实现应用管理功能（增删改查）。
   - 实现用户管理功能，配置同步文件夹。

### 4.2 第二阶段：同步功能开发
1. **桌面工具**:
   - 实现本地同步文件夹功能，监控文件变化并同步。
   - 支持离线访问，网络恢复后自动同步。
2. **Web后台管理端**:
   - 实现文件同步API，支持实时同步。
   - 提供同步文件夹配置接口。

### 4.3 第三阶段：优化与测试
1. **性能优化**:
   - 优化Electron应用启动速度和内存占用。
   - 优化文件同步效率，减少网络传输量。
2. **兼容性测试**:
   - 在Windows 7、Windows 11和Linux上测试桌面工具。
   - 在不同浏览器上测试Web后台管理端。

### 4.4 第四阶段：部署与发布
1. **桌面工具**:
   - 使用`electron-builder`打包应用，生成Windows和Linux安装包。
2. **Web后台管理端**:
   - 使用Docker容器化部署，确保环境一致性。
   - 使用Nginx作为反向代理，提升性能和安全性。

---

## 5. 其他注意事项
- **日志记录**:
  - 在关键操作中添加日志记录（如文件同步、用户登录）。
  - 使用Winston或Log4js等日志库，确保日志可追溯。
- **错误监控**:
  - 使用Sentry或Bugsnag监控应用错误，及时修复问题。
- **文档编写**:
  - 为每个模块编写详细的文档，包括功能描述、接口说明和使用示例。

